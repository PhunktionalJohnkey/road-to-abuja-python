name: Compose - Build, Push & Deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      REPO: ${{ secrets.DOCKERHUB_REPO }}
      SSH_OPTS: '-o StrictHostKeyChecking=no'
      REMOTE: 'root@${{ secrets.AKAMAI_INSTANCE_IP_ADDRESS }}'
      REMOTE_APP_DIR: '/opt/app'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Build the Docker image
      run: |
        docker build -f Dockerfile \
          -t "${{ env.DH_USER }}/${{ env.REPO }}:latest" \
          -t "${{ env.DH_USER }}/${{ env.REPO }}:${{ github.sha }}" \
          .
    - name: Push the Docker image to Docker Hub
      run: |
        docker push "${{ env.DH_USER }}/${{ env.REPO }}" --all-tags

    
    - name: Implement the Private SSH Key
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
    - name: Ensure Docker and Docker Compose are installed on VM
      run: |
        ssh ${{ env.SSH_OPTS }} ${{ env.REMOTE }} << EOF
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            rm get-docker.sh
            # Install Docker Compose
            sudo apt-get update
            sudo apt-get install docker-compose-plugin
          fi
        EOF
     
    - name: Login to Docker Hub on VM
      run: |
        ssh ${{ env.SSH_OPTS }} ${{ env.REMOTE }} echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ env.DH_USER }}" --password-stdin  

    - name: Create .env file
      run: |
        echo "PHUNKYTECH_SECRET_KEY=${{ secrets.PHUNKYTECH_SECRET_KEY }}" >> .env
        echo "API_ENDPOINT=${{ secrets.API_ENDPOINT }}" >> .env

    - name: Ensure remote directory exists
      run: |
        ssh -o StrictHostKeyChecking=no  ${{ secrets.SSH_USER }}@${{ secrets.REMOTE_HOST }} "mkdir -p ${{ env.REMOTE_APP_DIR }}"

    - name: Copy GitHub Actions .env file to Remote VM
      run: |
        scp -o StrictHostKeyChecking=no .env ${{ secrets.SSH_USER }}@${{ secrets.REMOTE_HOST }}:${{ env.REMOTE_APP_DIR }}/.env

    - name: Copy compose.prod.yaml to VM
      run: |
        scp -o StrictHostKeyChecking=no compose.prod.yaml ${{ secrets.SSH_USER }}@${{ secrets.REMOTE_HOST }}:$REMOTE_APP_DIR/compose.yaml

    - name: Pull updated images
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.REMOTE_HOST }} << EOF
          cd $REMOTE_APP_DIR
          docker compose pull
        EOF

    - name: Run Docker Compose
      run: |
        ssh -o StrictHostKKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.REMOTE_HOST }} << EOF
          cd $REMOTE_APP_DIR
          # Run containers
          docker compose up -d
        EOF  

    - name: Clean up .env file
      run: rm .env
    - name: Clean up SSH private key
      run: rm ~/.ssh/id_rsa
